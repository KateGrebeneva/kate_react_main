import React, { useState } from "react";
import "./App.css";
import { v4 as uuidv4 } from "uuid";

const initCharacters = [
  {
    id: uuidv4(),
    name: "–ê—Ä–∏—ç–ª—å",
    role: "–†—É—Å–∞–ª–æ—á–∫–∞",
    trait: "–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è",
  },
  {
    id: uuidv4(),
    name: "–£—Ä—Å—É–ª–∞",
    role: "–í–µ–¥—å–º–∞ –º–æ—Ä—è",
    trait: "–ö–æ–≤–∞—Ä–Ω–∞—è",
  },
  {
    id: uuidv4(),
    name: "–¢—Ä–∏—Ç–æ–Ω",
    role: "–û—Ç–µ—Ü –ê—Ä–∏—ç–ª—å",
    trait: "–ú—É–¥—Ä—ã–π",
  },
  {
    id: uuidv4(),
    name: "–§–ª–∞—É–Ω–¥–µ—Ä",
    role: "–†—ã–±–∫–∞, –¥—Ä—É–≥ –ê—Ä–∏—ç–ª—å",
    trait: "–î–æ–±—Ä–æ–¥—É—à–Ω—ã–π",
  },
  {
    id: uuidv4(),
    name: "–°–µ–±–∞—Å—Ç—å—è–Ω",
    role: "–ö—Ä–∞–±-–¥–≤–æ—Ä–µ—Ü–∫–∏–π",
    trait: "–ó–∞–±–æ—Ç–ª–∏–≤—ã–π",
  },
];

function App() {
  const [characters, setCharacters] = useState(initCharacters);
  const [inputName, setInputName] = useState("");
  const [inputRole, setInputRole] = useState("");
  const [inputTrait, setInputTrait] = useState("");
  const [editId, setEditId] = useState(null);

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const removeCharacter = (id) => {
    setCharacters(characters.filter((char) => char.id !== id));
  };

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const fillInputs = (id) => {
    const char = characters.find((char) => char.id === id);
    if (char) {
      setInputName(char.name);
      setInputRole(char.role);
      setInputTrait(char.trait);
      setEditId(id);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const updateCharacter = () => {
    if (!editId) return;

    setCharacters(
      characters.map((char) =>
        char.id === editId
          ? { ...char, name: inputName, role: inputRole, trait: inputTrait }
          : char
      )
    );

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω–ø—É—Ç–æ–≤
    setInputName("");
    setInputRole("");
    setInputTrait("");
    setEditId(null);
  };

  return (
    <div className="container">
      <h2 className="header">‚ú® –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ "–†—É—Å–∞–ª–æ—á–∫–∏" ‚ú®</h2>
      <ul>
        {characters.map((char) => (
          <li key={char.id} className="list-item">
            <span>üåä {char.name}</span>
            <span>üé≠ {char.role}</span>
            <span>üíñ {char.trait}</span>
            <button className="btn" onClick={() => fillInputs(char.id)}>
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button className="btn delete" onClick={() => removeCharacter(char.id)}>
              ‚ùå –£–¥–∞–ª–∏—Ç—å
            </button>
          </li>
        ))}
      </ul>

      <div className="input-group">
        <input
          type="text"
          placeholder="–ò–º—è"
          className="input-box"
          value={inputName}
          onChange={(e) => setInputName(e.target.value)}
        />
        <input
          type="text"
          placeholder="–†–æ–ª—å"
          className="input-box"
          value={inputRole}
          onChange={(e) => setInputRole(e.target.value)}
        />
        <input
          type="text"
          placeholder="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"
          className="input-box"
          value={inputTrait}
          onChange={(e) => setInputTrait(e.target.value)}
        />
        <button className="btn update" onClick={updateCharacter}>
          ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        </button>
      </div>
    </div>
  );
}

export default App;
